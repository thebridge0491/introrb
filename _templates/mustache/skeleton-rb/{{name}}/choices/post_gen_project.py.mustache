#!/usr/bin/env python
import os, glob, subprocess

def matches_filepatterns(filepats, paths):
	import fnmatch
	matches_pats = [os.path.join(root, file1) for path in paths
		for root, dirs, files in os.walk(path) for filepat in filepats
		for file1 in fnmatch.filter(dirs + files, filepat)]
	return matches_pats
	
def remove_pathlist(pathlist):
	import shutil
	for path in pathlist:
		if os.path.exists(path) and os.path.isdir(path):
			shutil.rmtree(path)
		elif os.path.exists(path):
			os.remove(path)
	
def copy_pathlist(pathlist, dst):
	import shutil
	for path in pathlist:
		if os.path.exists(path) and os.path.isdir(path):
			shutil.copytree(path, os.path.join(dst, os.path.basename(path)))
		elif os.path.exists(path) and not os.path.isdir(path):
			shutil.copy(path, dst)


if '__main__' == __name__:
	os.makedirs(os.path.join('build'), exist_ok=True)
	copy_pathlist(['choices'], 'build')
	remove_pathlist(['choices'])
	
	proj_dir = os.getcwd()
	choices = {
		'readmeext': '{{readmeext}}{{^readmeext}}.rst{{/readmeext}}',
		'license': '{{license}}{{^license}}Apache-2.0{{/license}}',
		'buildtool': '{{buildtool}}{{^buildtool}}rake{{/buildtool}}',
		'testfrwk': '{{testfrwk}}{{^testfrwk}}rspec{{/testfrwk}}',
		'executable': '{{executable}}{{^executable}}no{{/executable}}',
		'ffilib': '{{ffilib}}{{^ffilib}}none{{/ffilib}}'
		}
	nesteddirs = "{{nesteddirs}}{{^nesteddirs}}introrb/util{{/nesteddirs}}"
	project = "{{project}}{{^project}}util{{/project}}"

	copy_pathlist(glob.glob('build/choices/readme/README{0}'.format(
		choices['readmeext'])), 'README{0}'.format(choices['readmeext']))
	if os.path.exists('build/choices/_parent_readme'):
		copy_pathlist(glob.glob('build/choices/_parent_readme/README{0}'.format(
			choices['readmeext'])), 'build/choices/_parent_init/README{0}'.format(
			choices['readmeext']))

	if choices['license'] in ['Apache-2.0', 'MIT', 'BSD-3-Clause', 'GPL-3.0+', 'ISC',
			'Unlicense']:
		copy_pathlist(glob.glob('build/choices/license/LICENSE_{0}'.format(
			choices['license'])), 'LICENSE')

	if os.path.exists('build/choices/build_tool') and choices['buildtool'] in ['rake', 'make']:
		copy_pathlist(glob.glob('build/choices/build_tool/{0}/*'.format(
			choices['buildtool'])), '.')
	elif os.path.exists('build/choices/build_tool'): # default: rake
		copy_pathlist(glob.glob('build/choices/build_tool/rake/*'), '.')
	
	if os.path.exists('build/choices/testfrwk') and choices['testfrwk'] in ['rspec', 'minitest', 'minitest-spec']:
		copy_pathlist(glob.glob('build/choices/testfrwk/{0}/*'.format(
			choices['testfrwk'])), ".")
	elif os.path.exists('build/choices/testfrwk'): # default: rspec
		copy_pathlist(glob.glob('build/choices/testfrwk/rspec/*'),
			".")
	
	if os.path.exists("bin") and os.path.exists("lib/{0}".format(nesteddirs)) and 'yes' != choices['executable']:
		remove_pathlist("bin/{{parent}}{{^parent}}introrb{{/parent}}_{0} lib/{1}/cli.rb lib/{1}/app.rb".format(project, nesteddirs).split(' '))

	if os.path.exists('build/choices/ffi_lib') and choices['ffilib'] in ['ffi', 'swig']:
		if 'swig' == choices['ffilib']:
			copy_pathlist(glob.glob('build/choices/ffi_lib/{0}/*'.format(
				choices['ffilib'])), "ext/")
		else:
			copy_pathlist(glob.glob('build/choices/ffi_lib/{0}/*'.format(
				choices['ffilib'])), "lib/{0}/".format(nesteddirs))
	
	if os.path.exists('../_templates') and os.path.isdir('../_templates'):
		skeletondir = {{#skeletondir}}'{{skeletondir}}'{{/skeletondir}}{{^skeletondir}}'{0}/Templates/mustache/skeleton-rb'.format(os.getenv('HOME')){{/skeletondir}}
		skel_pardir = os.path.dirname(skeletondir)
		remove_pathlist([os.path.join('../_templates/mustache/',
			os.path.basename(skeletondir))])
		os.makedirs(os.path.join('../_templates/mustache'), exist_ok=True)
		copy_pathlist(glob.glob('{0}/render_mustache.*'.format(
			skel_pardir))+[skeletondir], '../_templates/mustache/')
