require 'spec_helper'

module {{parentcap}}{{joiner}}{{projectcap}}; end

epsilon = 0.001

describe '{{parentcap}}{{joiner}}{{projectcap}}::NewSpec' do
  before do
    # puts 'setup method ...'
  end
  
  after do
    # puts '... teardown method'
  end
  
  def in_epsilon(a, b, tolerance = 0.001)
    delta = tolerance.abs
    # (a - delta) <= b && (a + delta) >= b
    !((a + delta) < b) && !((b + delta) < a)
  end
  
  describe 'spec_version_exists' do
    it 'version exists' do
      expect(::{{parentcap}}{{joiner}}{{projectcap}}::VERSION).wont_be_nil
    end
  end

  describe 'spec_method' do
    it 'values are equal' do
      expect(4).must_equal (2 * 2)
    end
  end

  describe 'spec_strMethod' do
    it 'strings are equal' do
      expect('Hello').must_equal 'Hello'
    end
  end

  describe 'spec_dblMethod' do
    it 'doubles are equal' do
      # expect(4.0).must_be_close_to 4.0, (4.0 * epsilon)
      expect(in_epsilon(4.0 * epsilon, 4.0, 4.0)).must_equal true
    end
  end

  describe 'spec_failedMethod' do
    it 'values are equal' do
      expect(5).must_equal (2 * 2)
    end
  end

  describe 'spec_ignoredMethod' do
    it 'method is ignored' do
      skip 'not implemented'
      flunk
    end
  end

  describe 'spec_expectedThrow' do
    it 'ZeroDivisionError is thrown' do
      expect {
      begin
	    1/0
	  rescue ZeroDivisionError => e
	    throw ZeroDivisionError
	  end
	  }.must_throw ZeroDivisionError
    end
  end

  describe 'spec_expectedException' do
    it 'Exception is raised' do
      expect { raise Exception }.must_raise Exception
    end
  end
end
