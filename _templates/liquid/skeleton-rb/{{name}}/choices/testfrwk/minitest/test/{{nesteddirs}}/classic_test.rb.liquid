require 'test_helper'

module {{parentcap}}{{joiner}}{{projectcap}}; end

Classic = {{parentcap}}::{{projectcap}}::Classic

class {{parentcap}}{{joiner}}{{projectcap}}::ClassicTest < Minitest::Test
  @@epsilon = 0.001
  
  def before_setup
    # puts 'setup class ...'
  end
  
  def before_teardown
    # puts '... teardown class'
  end  
  
  def setup
    # puts 'setup method ...'
  end
  
  def teardown
    # puts '... teardown method'
  end
  
  def in_epsilon(a, b, tolerance = 0.001)
    delta = tolerance.abs
    # (a - delta) <= b && (a + delta) >= b
    !((a + delta) < b) && !((b + delta) < a)
  end
  
  def cartesian_prod(arr1, arr2)
    # arr1.product(arr2).select{|e| true}
    arr1.flat_map{|x| arr2.map{|y| [x, y]}}.select{|e| true}
  end
  
  def test_fact
    [lambda {|n| Classic.fact_lp(n)}, lambda {|n| Classic.fact_i(n)}].each{|f|
      assert 120 == f.call(5)
      assert 5040 == f.call(7)
      }
  end

  def test_expt
    params1, params2 = [2.0, 11.0, 20.0], [3.0, 6.0, 10.0]
    cartesian_prod(params1, params2).each{|b, n|
      ans = b ** n
      [lambda {|b, n| Classic.expt_lp(b, n)}, lambda {|b, n| Classic.expt_i(b, n)}].each{|f|
        # assert_in_epsilon ans, f.call(b, n), ans * @@epsilon
        assert in_epsilon(ans * @@epsilon, ans, f.call(b, n))
      }}
  end
end
