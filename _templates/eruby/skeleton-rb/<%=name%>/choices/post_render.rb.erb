#!/usr/bin/env ruby -w

require 'English'
require 'fileutils'

if __FILE__ == $PROGRAM_NAME
	FileUtils.mkdir_p('build')
	FileUtils.cp_r('choices', 'build')
	FileUtils.rm_r('choices')
	
	choices = {
		:readmeext => '<%=readmeext%>',
		:license => '<%=license%>',
		:buildtool => '<%=buildtool%>',
		:testfrwk => '<%=testfrwk%>',
		:executable => '<%=executable%>',
		:ffilib => '<%=ffilib%>'
		}
	nesteddirs = "<%=nesteddirs%>"
	
	if ['rspec', 'minitest', 'minitest-spec'].include?(choices[:testfrwk])
		FileUtils.cp_r("build/choices/testfrwk/#{choices[:testfrwk]}/.", '.')
	else # default: rspec
		FileUtils.cp_r('build/choices/testfrwk/rspec/.', '.')
	end
	
	if not 'yes' == choices[:executable]
		Dir['bin/<%=parent%>_<%=project%>', "lib/#{nesteddirs}/cli.rb", "lib/#{nesteddirs}/app.rb"].each{|p| FileUtils.rm(p)}
	end
	
	if ['ffi', 'swig'].include?(choices[:ffilib])
		if 'swig' == choices[:ffilib]
			FileUtils.cp_r("build/choices/ffi_lib/#{choices[:ffilib]}/.",
				"ext/")
		else
			FileUtils.cp_r("build/choices/ffi_lib/#{choices[:ffilib]}/.",
				"lib/#{nesteddirs}/")
		end
	end
	
	FileUtils.cp("build/choices/readme/README#{choices[:readmeext]}", 
		"README#{choices[:readmeext]}")
	FileUtils.cp("build/choices/_parent_readme/README#{choices[:readmeext]}",
		"build/choices/_parent_init/README#{choices[:readmeext]}")
	
	if ['Apache-2.0', 'MIT', 'BSD-3-Clause', 'GPL-3.0+', 'ISC', 'Unlicense'
			].include?(choices[:license])
		FileUtils.cp("build/choices/license/LICENSE_#{choices[:license]}", 
			'LICENSE')
	end
	
	if ['rake', 'make'].include?(choices[:buildtool])
		FileUtils.cp_r("build/choices/build_tool/#{choices[:buildtool]}/.", '.')
	else # default: rake
		FileUtils.cp_r('build/choices/build_tool/rake/.', '.')
	end
	
	if File.exist?('../_templates')
		skeletondir = "<%=skeletondir%>"
		skel_pardir = File.dirname(skeletondir)
		
		FileUtils.mkdir_p('../_templates/eruby')
		(Dir["#{skel_pardir}/render_eruby.*"]+[skeletondir]).each{|src|
			FileUtils.cp_r(src, '../_templates/eruby/')}
	end
end
