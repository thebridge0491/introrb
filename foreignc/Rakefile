# -*- ruby -*-
# encoding: utf-8

require 'rake/clean'
# require 'rake/extensiontask'
require 'rspec/core/rake_task' # rake/testtask | rspec/core/rake_task
require 'rubocop/rake_task'
require 'yard' # rdoc/task | yard
require 'rake/packagetask'

require_relative 'gemspec_helper'

[CLEAN, CLOBBER, Rake::FileList::DEFAULT_IGNORE_PATTERNS].each{|a| a.clear}
CLEAN.include('**/*.o', '*.log', '**/.coverage')
CLOBBER.include('build/*', 'build/.??*')

desc "Default target: rake help"
task :default => [:help]

desc "Help info"
task :help do
  puts "===== subproject: #{SPEC.name} =====\nHelp: rake [task]"
  sh "rake -T"
end

Rake::ExtensionTask.new 'classic_c' do |ext|
  ext.lib_dir = 'lib/introrb/foreignc'
end if defined? Rake::ExtensionTask

if defined? Rake::TestTask
  Rake::TestTask.new(:test) do |t|
    t.libs << 'test'
    t.pattern = 'test/**/*_test.rb'
    # t.options = [] # overridden by env var TESTOPTS="??"
    task(:test).add_description "[COV=#{ENV.fetch('COV', false)}]"
  end
end
if defined? RSpec::Core::RakeTask
  task(:spec).add_description "[COV=#{ENV.fetch('COV', false)}]"
  RSpec::Core::RakeTask.new(:spec, :arg1) do |t, args|
    t.pattern = 'spec/**/*_spec.rb'
    t.rspec_opts = "#{args[:arg1]} #{args.extras.join(' ')}"
  end
end

RuboCop::RakeTask.new(:rubocop, :arg1) do |t, args|
  t.options = ['--cache', 'false', args[:arg1]] + args.extras + ['lib', 'bin']
end if defined? RuboCop::RakeTask

Rake::RDocTask.new do |t| # config file: .rdoc_options, .document
  t.title = "#{SPEC.name} #{SPEC.version}"
  t.rdoc_dir = 'build/doc'
  t.rdoc_files.include('lib/**/*.rb', 'ext/**/*.{rb}', 'README*')
end if defined? Rake::RDocTask
YARD::Rake::YardocTask.new do |t| # config file: .yardopts, .document
  # t.files = ['lib/**/*.rb', 'ext/**/*.{rb}', '-', 'README.txt', 'LICENSE'] # overridden by env var FILES="??"
  t.stats_options = []
  t.options += ['--title', "#{SPEC.name} #{SPEC.version}", '--output-dir', 
    'build/doc'] # overridden by env var OPTS="??"
  task(:yard).add_description "[OPTS=#{ENV.fetch('OPTS', '')}]"
end if defined? YARD::Rake::YardocTask

file "pkg/#{SPEC.name}-#{SPEC.version}" do |p|
  mkdir_p(p.name)
  # sh "zip -9 -q -x @exclude.lst -r - . | unzip -od #{p.name} -"
  sh "tar --posix -L -X exclude.lst -cf - . | tar -xpf - -C #{p.name}"
end
if defined? Rake::PackageTask
  Rake::PackageTask.new(SPEC.name, SPEC.version) do |p|
    # task("pkg/#{SPEC.name}-#{SPEC.version}").invoke
    
    ENV.fetch('FMTS', 'tar.gz,zip').split(',').each{|fmt|
      if p.respond_to? "need_#{fmt.tr('.', '_')}="
        p.send("need_#{fmt.tr('.', '_')}=", true)
      else
        p.need_tar_gz = true
      end
    }
    task(:package).add_description "[FMTS=#{ENV.fetch('FMTS', 'tar.gz,zip')}]"
    task(:repackage).add_description "[FMTS=#{ENV.fetch('FMTS', 'tar.gz,zip')}]"
  end
else
  desc "[FMTS=#{ENV.fetch('FMTS', 'tar.gz,zip')}] Package project distribution"
  task :dist => ["pkg/#{SPEC.name}-#{SPEC.version}"] do |t|
    distdir = "#{SPEC.name}-#{SPEC.version}"
    
    ENV.fetch('FMTS', 'tar.gz,zip').split(',').each{|fmt|
      case fmt
      when '7z'
        rm_rf("pkg/#{distdir}.7z") || true
        cd('pkg') {sh "7za a -t7z -mx=9 #{distdir}.7z #{distdir}" || true}
      when 'zip'
        rm_rf("pkg/#{distdir}.zip") || true
        cd('pkg') {sh "zip -9 -q -r #{distdir}.zip #{distdir}" || true}
      else
        # tarext = `echo #{fmt} | grep -e '^tar$' -e '^tar.xz$' -e '^tar.zst$' -e '^tar.bz2$' || echo tar.gz`.chomp
        tarext = fmt.match(%r{(^tar$|^tar.xz$|^tar.zst$|^tar.bz2$)}) ? fmt : 'tar.gz'
        rm_rf("pkg/#{distdir}.#{tarext}") || true
        cd('pkg') {sh "tar --posix -h -caf #{distdir}.#{tarext} #{distdir}" || true}
      end
    }
  end
end

desc 'Build gem: gem build'
task :gem do
  mkdir_p('pkg')
  sh "gem build -o pkg/#{SPEC.name}-#{SPEC.version}.gem #{SPEC.name}.gemspec" || true
end

desc 'Uninstall gem: gem uninstall'
task :uninstall do
  sh "gem uninstall #{SPEC.name} || true"
end

desc 'Install gem: gem install'
task :install => "pkg/#{SPEC.name}-#{SPEC.version}.gem" do |t|
  sh "gem install --user-install #{t.source}" || true
  sh "gem list #{SPEC.name} ; sleep 3" || true
end

# vim: syntax=ruby
